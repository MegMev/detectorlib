<?xml version="1.0" encoding="UTF-8" standalone="no" ?>

<!-- 
    Author : J. Galan
    Date : 20/Dec/2018

    From now on we should give priority to the centralized gasFile database in a default gasServer as defined by TRestGas.

    The server contains a file with the gas definitions, and pre-generated gasFiles in Magboltz format that can be loaded
    by TRestGas.

    You may look directly into the gasFile definitions found at the server.

    http://sultan.unizar.es/gasFiles/gases.rml

    Yes, you need to add an exception to avoid the certificate warning message, and continue.
    

    #### DEFAULT : FULL SERVER GAS DATABASE USE ####
    ################################################

    The preferred use of TRestGas is that the gasFile definitions (RML file) will be retrieved from server and used if the
    requested gas definition is found.

    To use it in such a way, we have to replace the config filename argument of TRestGas by the keyword "server". I.e.

    //////////////////////////////////////////////////////////////////////
    TRestGas *gas = new TRestGas( "server", "Xenon-TMA 2Pct 10-10E3Vcm" );
    //////////////////////////////////////////////////////////////////////

    where "Xenon-TMA 2Pct 10-10E3Vcm" is the name of an existing pre-generated gas mixture definition in the server.


    #### DEFAULT : LOCAL GAS RML but SERVER GAS DATABASE USE ####
    #############################################################

    We can still use a local RML gas definitions file. If the naming conventions used in our local RML file are the same
    as the ones used in the gasServer, then the default option is to try to download the gasFile from the server before
    trying to find it locally.

    //////////////////////////////////////////////////////////////////////
    TRestGas *gas = new TRestGas( "myGasDefinitions.rml", "Xenon-TMA 2Pct 10-10E3Vcm" );
    //////////////////////////////////////////////////////////////////////

    I.e. even if we use a local RML file, TRestGas will attempt to find the corresponding gasFile in the gasServer.


    #### OPTION : USE COMPLETELY LOCAL GAS DATABASE ####
    ####################################################

    If the user wants to avoid to connect to the server and work completely in a local environment, he needs to redefine
    the gasServer parameter e.g. in <globals> section, inside our local gas file definitions : "myGasDefinitions.rml".

    As follows:
    //////////////////////////////////////////////////////////////////////
    <globals>
        <parameter name="gasServer" value="none" />
    </globals>
    //////////////////////////////////////////////////////////////////////

    
    Then, we can use the file locally as it was done previously (completely locally). 

    //////////////////////////////////////////////////////////////////////
    TRestGas *gas = new TRestGas( "myGasDefinitions.rml", "Xenon-TMA 2Pct 10-10E3Vcm" );
    //////////////////////////////////////////////////////////////////////


    ### DEFAULT : POPULATE THE GAS SERVER DATABASE WHEN WE GENERATE A NEW GAS MIXTURE ###
    #####################################################################################

    When we launch TRestGas using a local RML file with a TRestGas definition that is not
    found/indentified in the server gasFile database we will need to enable the gasGeneration.

    The gasGeneration for a gas mixture may take a long calculation time, and therefore it
    is not activated by default. In order to activate the gas generation we can do it in
    two ways.

    1) Adding the field 'generation="ON"' to the TRestGas definition.

    2) Adding a third argument (true) to the TRestGas constructor

    //////////////////////////////////////////////////////////////////////
    TRestGas *gas = new TRestGas( "myGasDefinitions.rml", "Xenon-TMA 2Pct 10-10E3Vcm", true );
    //////////////////////////////////////////////////////////////////////

    If the gasServer is being used (as it is by default), i.e. has not been set to "none". 
    Then, after the gas calculation process, the gas definition and the resulting gas generated
    file will be uploaded to the server for future use.

    Usually, all the users who got access to the code through LFNA Gitlab repository will have
    authorization, write access, to contribute to the gas database.

    Then, the definition will be downloaded each time that TRestGas is called with the recently
    generated gas definition. Again, being the copy at the server the one accessed with priority
    over the local copy.

    This makes the gasFile database in REST fully centralized. All users will access to the gas
    properties from this database, and all users will contribute to the centralized gas database
    when they use for the first time a gas mixture that is not found in the server.

    The gas definition provided later on this file can be used as an example to generate future 
    gas mixtures.

    Please, try to keep the same, or better, and as accurate as possible the name used for the
    gas definition. The values contained inside the gas defininition will be used to generate
    the gasFilename identified with the gas mixture definition, but the gas name given will be
    the final way to access the particular gas definition generated.

-->

<gases>
  <TRestGas name="Neon-Isobutane 5Pct 10-10E3Vcm" title="Neon-Isobutane Mixture (5Pct Isobutane)" >
    <parameter name="pressure" value="1" />
    <parameter name="temperature" value="293.15" />
    <parameter name="maxElectronEnergy" value="400" />
    <parameter name="W_value" value="21.3485" />
    <parameter name="nCollisions" value="10" />
    <eField Emin="10" Emax="1000." nodes="20" />
    <gasComponent name="ne" fraction="0.95" />
    <gasComponent name="iC4H10" fraction="0.05" />
  </TRestGas>
</gases>

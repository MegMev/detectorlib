====================================

Author : J. Galan
Date : 7-June-2016
Description : A preliminar example implementing an external process and a new metadata structure inside REST.

===================================


Class implementation :

    - src/myMetadata.cxx and inc/myMetadata.h

                This class defines a new metadata section named "myMetadataSection". We only define a member inside, named "dummy".
                A section example is defined inside config/myMetadata.rml

    - src/myProcess.cxx and inc/myProcess.h

                This class defines a new process. This process defines a TRestSignalEvent as input and a TRestSignalEvent as output.
                The process is doing nothing, just transfering the input event to the output event.
                It has a process metadata member named fMyProcessParameter that is connected with the configuration parameter "showEvery".
                This process prints in screen the event id of the input event for one event every "showEvery".
                

    - src/myManager.cxx inc/myManager.h :  

                This class derives from TRestManager, and extends the use of TRestManager,
                it gives an example on how adding the new process (myProcess) and instantiating new metadata (myMetadata) being added to TRestRun.


Compilation :

    Execute : make
    
    After sucess, you will find a new library in REST_PATH/lib/ named libMyRESTLibrary.so, and a new executable named "restLauncher".

    Execute : ./restLauncher (check the usage output of this file).

    For example : ./restLauncher --c $REST_PATH/examples/config/managers.rml --n FEMINOSToSignal --f DataFile.aqs

    If everything is ok we should observe few output lines produced by myProcess execution (you need a daq output aqs file).


Configuration files : 

    config/managers.rml : It contains an example of manager (FEMINOSToSignal) defining the processing of a raw binary file produced with FEMINOS-AGET chips.
    config/processes.rml : Definition of processes used in FEMINOSToSignal including the definition of myProcess.
    

Note : 
    Once we have generated our resulting REST file we need to load the generated library in ROOT (Substitute REST_PATH for your relative path).

    root
    [0] .x REST_PATH/scripts/LoadRESTScripts.C
    [1] gSystem->Load("REST_PATH/lib/libMyRESTLibrary.so")
    [2] TRestRun *run = new TRestRun();
    [3] run->OpenInputFile( "FileGeneratedWithFEMINOSToSignalManager.root" )
    [4] run->PrintAllMetadata( );

    If everything is ok the last command should dump on screen the metadata information of our process and our metadata structure as we gave in our configuration.



